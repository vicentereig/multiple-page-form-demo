{"version":3,"sources":["components/SignUp/Account/reducer.js","config/reducer.js","components/MultipleStepFlow/reducer.js","components/SignUp/Privacy/reducer.js","config/store.js","config/middleware.js","components/ProgressIndicator.jsx","components/MultipleStepFlow/CurrentStep.jsx","components/MultipleStepFlow/actions.js","components/MultipleStepFlow.jsx","Pages/MultipleStepFlowStory.jsx","lib/validators.js","components/SignUp/Account/ErrorMessage.jsx","components/MultipleStepFlow/ActionPanel.jsx","components/MultipleStepFlow/NextButton.jsx","components/SignUp/Account.jsx","components/SignUp/Account/actions.js","components/SignUp/Privacy.jsx","components/SignUp/Privacy/actions.js","components/SignUp/Completed.jsx","components/SignUp.jsx","Pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["reducers","CREATE_WORKFLOW","state","action","ui","workflowName","steps","currentStep","MOVE","nextStep","CREATE_ACCOUNT","models","account","CREATE_PRIVACY_DETAILS","privacy","rootReducer","createReducer","store","createStore","applyMiddleware","next","console","group","type","info","result","log","getState","groupEnd","ProgressIndicator","className","labelWidth","useState","length","StepLabel","title","split","concat","join","Labels","labels","map","step","i","key","ProgressBar","Bullet","isPending","Edge","Step","bar","CurrentStep","name","children","workflow","onFinalStepComplete","dispatch","useDispatch","useEffect","moveSteps","move","currentChild","Children","child","index","cloneElement","id","MultipleStepFlow","onComplete","useSelector","props","createWorkflow","isComplete","setComplete","onClick","FinalStep","MultipleStepFlowStory","emailPattern","atLeastOneUpperAndLower","value","replace","atLeastOneNumber","ErrorMessage","errors","fieldName","message","ActionPanel","NextButton","defaultClassName","Account","useForm","handleSubmit","register","onSubmit","values","placeholder","ref","required","pattern","minLength","validate","Privacy","createPrivacyDetails","Completed","SignUp","Home","href","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5f49fb1b.chunk.js","sourcesContent":["const createAccountReducer = (state, action) => void(state.models.account = action.account)\nexport default createAccountReducer\n","import { createReducer } from '@reduxjs/toolkit'\n\nimport { CREATE_ACCOUNT } from \"components/SignUp/Account/actions\"\nimport { CREATE_PRIVACY_DETAILS} from \"components/SignUp/Privacy/actions\"\nimport { CREATE_WORKFLOW, MOVE } from \"components/MultipleStepFlow/actions\"\nimport createAccountReducer from \"components/SignUp/Account/reducer\"\nimport privacyDetailsReducer from \"components/SignUp/Privacy/reducer\"\nimport {createWorkflowReducer, moveReducer} from \"components/MultipleStepFlow/reducer\"\n\n\nconst initialState = {\n  ui: {},\n  models: {}\n}\n\nconst reducers = {\n  CREATE_WORKFLOW: createWorkflowReducer,\n  MOVE: moveReducer,\n  CREATE_ACCOUNT: createAccountReducer,\n  CREATE_PRIVACY_DETAILS: privacyDetailsReducer\n}\n\n\nconst rootReducer = createReducer(initialState, reducers)\n\nexport default rootReducer\n","const createWorkflowReducer = (state, action ) => void (state.ui[action.workflowName] = { steps: action.steps, currentStep: 0 })\nconst moveReducer = (state, action) => void(state.ui[action.workflowName].currentStep = action.nextStep)\n\nexport {createWorkflowReducer, moveReducer}\n","const privacyDetailsReducer = (state, action) => void(state.models.account.privacy = action.privacy)\n\nexport default privacyDetailsReducer\n","import {createStore, applyMiddleware} from \"redux\"\nimport rootReducer from \"config/reducer\"\nimport {logger} from \"config/middleware\"\n\nconst store = createStore(rootReducer, applyMiddleware(logger))\n\nexport default store\n","/**\n * Logs all actions and states after they are dispatched.\n */\nconst logger = store => next => action => {\n  console.group(action.type)\n  console.info('dispatching', action)\n  const result = next(action)\n  console.log('next state', store.getState())\n  console.groupEnd()\n  return result\n}\n\nexport { logger }\n","import React, { useState } from \"react\";\n\nconst ProgressIndicator = ({className, steps, currentStep}) => {\n\n  const labelWidth = useState(`w-1/${steps.length}`)\n\n  const StepLabel = ({title}) => {\n    let className = \"mx-auto text-gray-800 text-xs  text-center first:text-left last:text-right\".split(\" \").concat(labelWidth)\n\n    return (\n      <li className={className.join(\" \")}>\n        {title}\n      </li>\n    )\n  }\n\n  const Labels = ({steps}) => {\n    const labels = steps.map((step, i) => <StepLabel key={i}  title={step.title}/>)\n\n    return (\n      <ul className=\"flex content-center\">\n        {labels}\n      </ul>\n    )\n  }\n\n  const ProgressBar = ({steps, currentStep}) => {\n\n    const Bullet = ({isPending}) => {\n      const className = \"w-6 h-6  border-2 border-white mx-auto rounded-full text-white\"\n        .split(\" \")\n        .concat( isPending ? 'bg-gray-400' : 'bg-gray-800')\n        .join(\" \")\n\n     return (\n       <div className=\"flex-1\">\n         <div className={className}>\n         </div>\n       </div>\n     )\n    }\n\n    const Edge =({isPending}) => {\n      const className = \"text-xs leading-none py-1 w-full\"\n        .split(\" \")\n        .concat( isPending ? 'bg-gray-400' : 'bg-gray-800')\n        .join(\" \")\n\n      return (\n        <div className=\"w-full content-center items-center align-middle justify-between flex\">\n          <div className=\"flex-1\">\n            <div className={className}></div>\n          </div>\n        </div>\n      )\n    }\n\n    const Step = ({isPending}) => {\n      return (\n        <>\n          <Bullet isPending={isPending}/>\n          <Edge isPending={isPending}/>\n        </>\n      )\n    }\n    const bar = (\n      steps.map((step, i) => {\n        if ( i < steps.length - 1 ) {\n          return (<Step key={i} isPending={i > currentStep}/>)\n        } else {\n          return (<Bullet key={i} isPending={i > currentStep}/>)\n        }\n      })\n    )\n\n    return (\n      <div className=\"flex\">\n        {bar}\n      </div>\n    )\n  }\n\n  return (\n    <div className={className}>\n      <Labels steps={steps}/>\n      <ProgressBar steps={steps} currentStep={currentStep}/>\n    </div>\n  )\n}\n\nexport default ProgressIndicator\n","import React, {Children, cloneElement, useEffect} from \"react\"\nimport {useDispatch} from \"react-redux\"\nimport {move} from 'components/MultipleStepFlow/actions'\n\n/**\n * CurrentStep renders a single Step. It also enhances the children\n * with the following properties:\n *\n *  - `title`: a short description of the current task at hand.\n *  - `currentStep`: An index representing the current step, starts at 0.\n *  - `steps`: A sorted collection of steps with their title attributes. Useful to render progress bars.\n *  - `moveSteps`: A callback function to instruct the Workflow to move certain amount of steps forward or backwards.\n *\n * @param name Name of the workflow\n * @param children the Steps passed as React components in the Component body.\n * @param workflow An object keeping track of the state of the workflow: {currentStep, steps:[]}\n * @param onFinalStepComplete A mechanism to notify the parent when the Final State has been reached\n *\n */\nconst CurrentStep = ({name, children, workflow, onFinalStepComplete}) => {\n  const dispatch = useDispatch()\n\n  const notifyParentWhenFlowIsComplete = () => {\n    if ( workflow.currentStep === workflow.steps.length - 1 ) {\n      onFinalStepComplete()\n    }\n  }\n\n  useEffect(notifyParentWhenFlowIsComplete, [workflow.currentStep, workflow.steps.length, onFinalStepComplete])\n\n\n  const moveSteps = (nextStep) => {\n    dispatch(move(name, nextStep))\n  }\n\n\n  const currentChild = Children.map(children, (child, index) => {\n    if ( index === workflow.currentStep ) {\n      return cloneElement(child, { currentStep: workflow.currentStep, steps: workflow.steps, moveSteps: moveSteps})\n    }\n  })\n\n  return (<div id={name}>{currentChild}</div>)\n}\n\nexport default CurrentStep\n","const CREATE_WORKFLOW = 'CREATE_WORKFLOW'\nfunction createWorkflow(workflowName, steps) {\n  return { type: CREATE_WORKFLOW, workflowName, steps}\n}\n\nconst MOVE = 'MOVE'\nfunction move(workflowName, nextStep) {\n  return {type: MOVE, workflowName, nextStep}\n}\n\nexport { createWorkflow, move, CREATE_WORKFLOW, MOVE}\n","import React, {Children, useEffect} from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {createWorkflow, createSteps, move} from 'components/MultipleStepFlow/actions'\nimport CurrentStep from 'components/MultipleStepFlow/CurrentStep'\n\n/**\n * MultipleStepFlow allows you to present the user with a\n * task that must be accomplished in several steps, one at the time.\n *\n * Usually, after the user completes a task, they click on a button\n * to move onto the next step.\n *\n * Steps can be any kind of Component. MultipleStepFlow makes sure\n * they have access via props to information related to\n * where the user is at in the current workflow,\n * and how to move onto the next task.\n *\n * Steps are rendered sequentially in the order they are defined\n * in the JSX template. The last Step is considered the Final State.\n *\n * When the MultipleStepFlow renders the Final State, it invokes\n * a callback, to notify the parent Component that the overall set\n * of tasks are completed.\n *\n * Every Step has access to the following properties:\n *  - `title`: a short description of the current task at hand.\n *  - `currentStep`: An index representing the current step, starts at 0.\n *  - `steps`: A sorted collection of steps with their title attributes. Useful to render progress bars.\n *  - `moveSteps`: A callback function to instruct the Workflow to move certain amount of steps forward or backwards.\n *\n * ```jsx\n * const Step = ({title, currentStep, steps, moveSteps}} => {\n *   return (\n *     <h1>{title}</h1>\n *     Progress: {currentStep+1}/{steps.length}\n *     <button onClick={() => moveSteps(currentStep+1)}>\n *   )\n * }\n *\n * <MultipleStepFlow>\n *   <Step title=\"First Step\"/>\n *   <Step title=\"Second Step\"/>\n *   <Step title=\"Final Step\"/>\n * </MultipleStepFlow>\n * ```\n *\n * @param name The identificator used to persist the state to redux.\n * @param children The pages that will be rendered one at the time.\n * @param onComplete A callback that will be fired when the last pages has been rendered\n */\nconst MultipleStepFlow = ({name, children, onComplete}) => {\n  const dispatch = useDispatch()\n  const workflow = useSelector( state => state.ui[name])\n\n  const buildSteps = () => {\n    const steps = Children.map(children, ({props}) => {\n      return { title: props.title  }\n    })\n\n    dispatch(createWorkflow(name, steps))\n  }\n\n  useEffect(buildSteps, [])\n\n  if (!workflow) {\n    return null\n  }\n\n  return (\n    <CurrentStep name={name} workflow={workflow} onFinalStepComplete={onComplete}>\n      {children}\n    </CurrentStep>\n  )\n}\n\nexport default MultipleStepFlow\n","import React, {useState} from \"react\"\nimport {Provider} from \"react-redux\"\nimport store from \"config/store\"\n\nimport ProgressIndicator from \"components/ProgressIndicator\"\nimport MultipleStepFlow from 'components/MultipleStepFlow'\n\nconst MultipleStepFlowStory = () => {\n  const logCompletion = () => {\n    console.log('Completed!')\n  }\n\n  return (\n    <section className=\"pt-4\">\n      <h3 className=\"font-serif tracking-tight text-xl font-medium leading-10\">Multiple Step Flow</h3>\n      <div className=\"flex flex-row\">\n        <div className=\"w-1/2\">\n          <Provider store={store}>\n            <MultipleStepFlow name=\"Sample Flow\" onComplete={logCompletion}>\n              <Step title=\"First Step\"/>\n              <Step title=\"Second Step\"/>\n              <Step title=\"Third Step\"/>\n              <FinalStep title=\"Fin.\"/>\n            </MultipleStepFlow>\n          </Provider>\n        </div>\n        <div className=\"pl-8 w-1/2\">\n          <p>\n            A Multiple Step Workflow supports an arbitrary amount of steps. In this example,\n            each step specifies a title, and additionally needs to be completed before moving\n            forward.\n          </p>\n\n          <p>Steps are represented as children React components, which are rendered one at the time.</p>\n\n          <p>Every time a Step is rendered, the <code>MultipleStepFlow</code> provides them with\n            additional properties such as <code>currentStep</code> and <code>steps</code>. This way\n            the current step is able to show progress back to the user.</p>\n\n          <p>\n            In this naive scenario, completion is marked when the button Completed is cliked.\n          </p>\n        </div>\n      </div>\n    </section>\n\n  )\n}\n\n\nconst Step = ({title, currentStep, steps, moveSteps }) => {\n  const [isComplete, setComplete] = useState(false)\n\n  const stepCompleted = () => {\n    setComplete(true)\n  }\n\n  const moveForwardIfCompleted = () => {\n    if (isComplete) {\n      moveSteps(currentStep+1)\n    }\n  }\n\n  return (\n    <div className=\"border border-gray-400 rounded-lg p-4\">\n      <ProgressIndicator steps={steps} currentStep={currentStep} className=\"pb-8\"/>\n      <h1>{title}</h1>\n      <button onClick={stepCompleted}\n              className=\"bg-gray-800 text-white mt-4 py-2 px-4 rounded-full\"\n              type=\"submit\">Complete</button>\n\n      <button onClick={moveForwardIfCompleted}\n              className=\"bg-gray-800 text-white mt-4 py-2 px-4 rounded-full\"\n              type=\"submit\">Next</button>\n    </div>\n  )\n}\n\nconst FinalStep = ({title, steps, currentStep}) => {\n  return (\n    <div className=\"border border-gray-400 rounded-lg p-4\">\n      <ProgressIndicator steps={steps} currentStep={currentStep} className=\"pb-8\"/>\n      <h1>{title}</h1>\n    </div>\n  )\n}\n\nexport default MultipleStepFlowStory\n","const emailPattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n\nconst atLeastOneUpperAndLower = (value) => {\n  return value.replace(/([A-Z][a-z])+/g,\"\").length < value.length ||\n    'It should contain at least one uppercase and one lowercase character'\n}\n\nconst atLeastOneNumber = (value) => {\n  return value.replace(/[\\d]+/g,\"\").length < value.length  ||\n    'Your password needs to include at least one number'\n}\n\nexport {atLeastOneNumber, atLeastOneUpperAndLower, emailPattern }\n","import React from \"react\";\n\nconst ErrorMessage = ({errors, fieldName}) => {\n  if (!errors[fieldName]) {\n    return null\n  }\n  const className = `text-red-500 text-xs errorMessage-${fieldName}`\n  const {message} = errors[fieldName]\n  return (\n    <span className={className}>{message}</span>\n  )\n}\n\nexport default ErrorMessage\n","import React from \"react\";\n\nconst ActionPanel = ({children}) => {\n  return (\n    <div className=\"w-full flex justify-end\">\n      {children}\n    </div>\n  )\n}\n\nexport default ActionPanel\n","import React from \"react\";\n\nconst NextButton = () => {\n  return (\n    <button className=\"block bg-gray-800 text-white mt-4 py-2 px-4 rounded-full nextStep\"\n            type=\"submit\">Next</button>\n  )\n}\n\nexport default NextButton\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\n\nimport { atLeastOneNumber, atLeastOneUpperAndLower, emailPattern } from 'lib/validators'\nimport ProgressIndicator from 'components/ProgressIndicator'\nimport { createAccount } from 'components/SignUp/Account/actions'\nimport ErrorMessage from 'components/SignUp/Account/ErrorMessage'\nimport ActionPanel from 'components/MultipleStepFlow/ActionPanel'\nimport NextButton from 'components/MultipleStepFlow/NextButton'\n\nconst defaultClassName = \"border rounded-lg border-gray-300 p-4 w-1/2\".split()\n\n\nconst Account = ({className=[], steps, currentStep, moveSteps}) => {\n  const { handleSubmit, register, errors } = useForm()\n  const dispatch = useDispatch()\n\n  const onSubmit = values => {\n    dispatch(createAccount(values))\n    moveSteps(currentStep+1)\n  }\n\n\n  return (\n    <div className={defaultClassName.concat(className).join(' ')}>\n      <ProgressIndicator className=\"pb-8\" steps={steps} currentStep={currentStep}/>\n      <h1 className=\"font-bold tracking-tight pt-4 text-lg\">Setup Your Account</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <h2 className=\"font-medium text-gray-700 tracking-tight text-md\">Your Personal Details</h2>\n\n        <label className=\"block\">\n          <span className=\"text-gray-700 text-sm\">Name</span>\n          <input name=\"fullName\"\n                 placeholder=\"Jane Doe\"\n                 className=\"form-input text-sm mt-1 block w-full  fullNameField\"\n                 ref={register({required: 'Please enter your full name'})}\n          />\n          <ErrorMessage errors={errors} fieldName=\"fullName\"/>\n        </label>\n\n        <label className=\"block pt-4\">\n          <span className=\"text-gray-700 text-sm\">Role</span>\n          <input className=\"form-input text-sm mt-1 block w-full roleField\" name=\"role\" placeholder=\"Software Engineer\"/>\n        </label>\n\n        <h2 className=\"font-medium text-gray-700 tracking-tight text-md pt-4\">Your User Details</h2>\n        <label className=\"block\">\n          <span className=\"text-gray-700 text-sm\">Email</span>\n          <input className=\"form-input text-sm mt-1 block w-full emailField\" name=\"email\" placeholder=\"jane@email.com\"\n                   ref={register({\n                     required: 'Please enter your email address',\n                     pattern: {\n                       value: emailPattern,\n                       message: 'Please enter a valid email'\n                     }\n                  })}\n          />\n          <ErrorMessage errors={errors} fieldName=\"email\"/>\n        </label>\n\n        <label className=\"block pt-4\">\n          <span className=\"text-gray-700 text-sm\">Password</span>\n          <input type=\"password\"\n                 name=\"password\"\n                 placeholder=\"Your password\"\n                 className=\"form-input text-sm mt-1 block w-full passwordField\"\n                 ref={register({\n                   required: 'In order to keep your account safe, you need to choose a password',\n                   minLength: {\n                     value: 10,\n                     message: 'Please enter a password at least 10 characters long'\n                   },\n                   validate: { atLeastOneNumber, atLeastOneUpperAndLower}\n                 })}\n          />\n          <ErrorMessage errors={errors} fieldName=\"password\"/>\n        </label>\n\n        <ActionPanel>\n          <NextButton/>\n        </ActionPanel>\n      </form>\n    </div>\n  )\n}\n\nexport default Account\n","const CREATE_ACCOUNT = 'CREATE_ACCOUNT'\nfunction createAccount(account) {\n  return {type: CREATE_ACCOUNT, account}\n}\n\nexport  {createAccount, CREATE_ACCOUNT}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport ProgressIndicator from 'components/ProgressIndicator'\nimport { createPrivacyDetails } from 'components/SignUp/Privacy/actions'\nimport ActionPanel from 'components/MultipleStepFlow/ActionPanel'\nimport NextButton from 'components/MultipleStepFlow/NextButton'\n\nconst defaultClassName = \"border rounded-lg border-gray-300 p-4 w-1/2\".split()\n\nconst Privacy = ({className, currentStep, steps, moveSteps}) => {\n  const { handleSubmit, register } = useForm()\n  const dispatch = useDispatch()\n\n  const onSubmit = privacy => {\n    dispatch(createPrivacyDetails(privacy))\n    moveSteps(currentStep+1)\n  }\n\n  return (\n    <div className={defaultClassName.concat(className).join(' ')}>\n      <ProgressIndicator className=\"pb-8\" steps={steps} currentStep={currentStep}/>\n\n      <h1 className=\"font-bold tracking-tight pt-4 text-lg\">Your Privacy</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"block\">\n          <span className=\"text-gray-700\">\n            Choose what we can do with your personal data\n          </span>\n          <div className=\"mt-2\">\n            <div>\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"productUpdatesSubscription\" ref={register} className=\"form-checkbox productUpdatesField\"/>\n                  <span className=\"ml-2\">\n                    Receive updates about Tray.io product by email\n                  </span>\n              </label>\n            </div>\n            <div>\n              <label className=\"inline-flex items-center\">\n                <input type=\"checkbox\" name=\"otherProductsSubscription\" ref={register}  className=\"form-checkbox otherProductsField\"/>\n                  <span className=\"ml-2\">\n                    Receive communication by email for other products\n\n                  </span>\n              </label>\n            </div>\n\n          </div>\n        </div>\n\n        <ActionPanel>\n          <NextButton/>\n        </ActionPanel>\n      </form>\n    </div>\n  )\n}\n\nexport default Privacy\n","const CREATE_PRIVACY_DETAILS = 'CREATE_PRIVACY_DETAILS'\nfunction createPrivacyDetails(privacy) {\n  return {type: CREATE_PRIVACY_DETAILS, privacy }\n}\n\nexport {createPrivacyDetails, CREATE_PRIVACY_DETAILS}\n","import React from 'react'\nimport ProgressIndicator from 'components/ProgressIndicator'\n\nconst defaultClassName = \"border rounded-lg border-gray-300 p-4 w-1/2\".split()\n\nconst Completed = ({className, currentStep, steps}) => {\n  return (\n    <div className={defaultClassName.concat(className).join(' ')}>\n      <ProgressIndicator className=\"pb-8\" steps={steps} currentStep={currentStep}/>\n\n      <h1 className=\"font-bold tracking-tight pt-4 text-lg\">You are all set!</h1>\n      <p>Welcome to Tray.io, proceed to sign in and start using the product.</p>\n\n    </div>\n  )\n}\n\nexport default Completed\n","import React from \"react\"\nimport {useSelector} from 'react-redux'\nimport MultipleStepFlow from 'components/MultipleStepFlow'\nimport Account from 'components/SignUp/Account'\nimport Privacy from 'components/SignUp/Privacy'\nimport Completed from 'components/SignUp/Completed'\n\n\n\nconst SignUp = ({className}) => {\n  const account = useSelector( state => state.models.account )\n\n  const logInfo = () => {\n    console.log('User created', account)\n\n  }\n\n  return (\n    <MultipleStepFlow name=\"SignUp\" onComplete={logInfo}>\n      <Account className={className} title=\"Your Account\"/>\n      <Privacy className={className} title=\"Your Privacy\"/>\n      <Completed className={className} title=\"All set!\"/>\n    </MultipleStepFlow>\n  )\n}\n\nexport default SignUp\n","import React from 'react'\n\nimport MultipleStepFlowStory from './MultipleStepFlowStory'\n\nimport Account from 'components/SignUp/Account'\nimport Privacy from 'components/SignUp/Privacy'\nimport Completed from \"components/SignUp/Completed\"\nimport SignUp from \"components/SignUp\";\n\nimport ProgressIndicator from \"../components/ProgressIndicator\";\n\nimport store from \"config/store\"\nimport {Provider} from \"react-redux\";\n\n\nconst steps = [\n  { title: 'Your Account'},\n  { title: 'Your Privacy'},\n  { title: 'All set!'}\n]\n\n\nconst Home = () => {\n  return (\n    <>\n    <article className=\"p-4\">\n      <header className=\"border-b-2 border-gray-400 pb-8 mb-8\">\n        <h1 className=\"font-serif tracking-tight font-medium text-4xl leading-normal pt-4\">Building a Multiple Step Sign-up Process</h1>\n        <a href=\"https://github.com/vicentereig/multiple-page-form-demo\" className=\"text-gray-600\">View on Github</a>\n        <p className=\"font-light text-md pt-2\">\n          Hi there!\n\n          Thanks for taking a look at this project. The goal is to\n          write a Multiple Page Form that is easy to extend. This document will\n          walk you through over the following sections:\n        </p>\n\n        <ol className=\"font-light text-md pt-2 ml-12 list-decimal\">\n          <li><strong>Interactive Demo</strong></li>\n          <li><strong>Storybook</strong>: a breakdown of the low-fi components used in the multiple step form.</li>\n        </ol>\n\n        <p className=\"font-light text-md pt-2\">Head over to the <a class=\"text-blue-400 underline font-medium\" href=\"https://github.com/vicentereig/multiple-page-form-demo/blob/master/README.md\">\n            README.md\n          </a> to learn how to use the code, set it up, and extend it.\n        </p>\n      </header>\n\n\n      <section>\n        <h2 className=\"font-serif tracking-tight text-2xl font-medium leading-10\">Interactive Demo</h2>\n        <p>When you have completed the three steps in the workflow, it will `console.log` a JSON object\n          containing all the information you entered.</p>\n        <div className=\"pt-8 flex flex-row\">\n          <div className=\"mx-auto w-1/3\">\n            <Provider store={store}>\n              <SignUp className=\"w-full\"/>\n            </Provider>\n          </div>\n        </div>\n      </section>\n    </article>\n\n    <article className=\"p-4\">\n      <h1 className=\"font-serif tracking-tight text-3xl font-medium leading-10\">Storybook</h1>\n      <p>Find below a collection of low-fidelity components used to build the multiple step workflow incrementally.</p>\n\n      <MultipleStepFlowStory/>\n\n      <section className=\"pt-4\">\n        <h2 className=\"font-serif tracking-tight text-xl font-medium leading-10\">ProgressIndicator</h2>\n        <div className=\"flex flex-row\">\n          <div className=\"w-1/2\">\n            <ProgressIndicator className=\"pb-8\" currentStep={0} steps={steps}/>\n            <ProgressIndicator className=\"pb-8\" currentStep={1} steps={steps}/>\n            <ProgressIndicator className=\"pb-8\" currentStep={2} steps={steps}/>\n          </div>\n          <div className=\"pl-8 w-1/2\">\n            <p>\n              Here's a simple progress indicator. It takes an arbitrary set of steps with their titles,\n              and renders them, while being able to make a difference whether they are completed or not.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section>\n        <h3 className=\"font-serif tracking-tight text-xl font-medium leading-10\">Accounts Detail Page</h3>\n        <div className=\"flex flex-row\">\n          <div className=\"w-1/2\">\n            <Provider store={store}>\n              <Account className=\"w-full\" currentStep={0} steps={steps}/>\n            </Provider>\n          </div>\n          <div className=\"pl-8 w-1/2\">\n            <p>\n              The first step in the workflow collects relevant information to let a user create an account.\n            </p>\n\n            <p>\n              It receives via props the <code>currentStep</code> and <code>steps</code> in the workflow, which\n              will be passed by the <code>MultipleStepFlow</code> component governing the rendering and progress\n              in the experience.\n            </p>\n\n            <p>This form is considered valid when the following validation rules are met:</p>\n\n            <ul className=\"list-disc pl-12\">\n              <li>name, email, and password fiels are required.</li>\n              <li>password should be greater than 9 chars and at least one\n              number, one char uppercase, one char lowercase.\n              </li>\n\n            </ul>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"pt-4\">\n        <h3 className=\"font-serif tracking-tight text-xl font-medium leading-10\">Privacy Detail Page</h3>\n        <div className=\"flex flex-row\">\n          <div className=\"w-1/2\">\n            <Provider store={store}>\n              <Privacy className=\"w-full\" currentStep={1} steps={steps}/>\n            </Provider>\n          </div>\n          <div className=\"pl-8 w-1/2\">\n            <p>Checkboxes in this step are optional, so the user can skip to the last step if they want to.</p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"pt-4\">\n        <h3 className=\"font-serif tracking-tight text-xl font-medium leading-10\">Signup Complete</h3>\n        <div className=\"flex flex-row\">\n          <div className=\"w-1/2\">\n            <Provider store={store}>\n              <Completed className=\"w-full\"  currentStep={2} steps={steps}/>\n            </Provider>\n          </div>\n          <div className=\"pl-8 w-1/2\">\n            <p>\n              While the final step shows a confirmation message, it notifies the <code>MultipleStepFlow</code>\n              component that the user has reached the end. This way we can act in consequence, in this very case,\n              it <code>console.log</code> the JSON structure representing the sign up.\n            </p>\n          </div>\n        </div>\n      </section>\n    </article>\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport Home from './Pages/Home'\nimport './App.css'\n\n\nfunction App() {\n  return (\n   <div className=\"font-sans antialiased w-4/5 mx-auto bg-white\">\n     <Home/>\n   </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}